generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model agencies {
  id              String?  @default(dbgenerated("nanoid(11)"))
  tc_agency_id    String   @db.VarChar
  agency_id       String?  @db.VarChar
  agency_name     String   @db.VarChar
  agency_url      String   @db.VarChar
  agency_timezone String   @db.VarChar
  agency_lang     String?  @db.VarChar
  agency_phone    String?  @db.VarChar
  agency_fare_url String?  @db.VarChar
  agency_email    String?  @db.VarChar
  updatedat       DateTime @db.Timestamp(6)

  @@ignore
}

model areas {
  tc_agency_id String   @db.VarChar
  area_id      String   @id @db.VarChar
  area_name    String?  @db.VarChar
  updatedat    DateTime @db.Timestamp(6)
  agencyid     Int?
}

model calendar {
  id           String?  @default(dbgenerated("nanoid(11)"))
  tc_agency_id String   @db.VarChar
  service_id   String   @db.VarChar
  monday       Int
  tuesday      Int
  wednesday    Int
  thursday     Int
  friday       Int
  saturday     Int
  sunday       Int
  end_date     Int
  start_date   Int
  updatedat    DateTime @db.Timestamp(6)

  @@unique([service_id, tc_agency_id])
  @@index([end_date], map: "idx_calendar_end_date")
  @@index([start_date], map: "idx_calendar_start_date")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model calendar_dates {
  id             String?  @default(dbgenerated("nanoid(11)"))
  tc_agency_id   String   @db.VarChar
  service_id     String   @db.VarChar
  date           Int
  exception_type Int
  holiday_name   String?  @db.VarChar
  updatedat      DateTime @db.Timestamp(6)

  @@index([date], map: "idx_calendar_dates_date")
  @@index([exception_type], map: "idx_calendar_dates_exception_type")
  @@index([service_id], map: "idx_calendar_dates_service_id")
  @@ignore
}

model conversation {
  id                    String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Char(11)
  title                 String
  bookmarked            String[] @default([])
  subscribed            String[] @default([])
  categories            String[] @default([])
  main_category         String   @default("UNKNOWN")
  related_conversations String[] @default([])
  description           String
  tc_agency_id          String
  route_long_name       String?
  stop_name             String?
  profile_id            String   @db.Char(11)
  user_id               String   @db.Char(11)
  lat                   Float?
  lon                   Float?
  change_id             String?  @db.Char(11)
  issue_time            DateTime @default(now())
  created_at            DateTime @default(now())
  updated_at            DateTime @default(now())
  tbs                   Boolean?
  is_resolved           Boolean?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model directions {
  id           String?  @default(dbgenerated("nanoid(11)"))
  tc_agency_id String   @db.VarChar
  route_id     String   @db.VarChar
  direction_id Int?
  direction    String   @db.VarChar
  updatedat    DateTime @db.Timestamp(6)
  agencyid     Int?

  @@index([direction_id], map: "idx_directions_direction_id")
  @@index([route_id], map: "idx_directions_route_id")
  @@ignore
}

model fare_attributes {
  fare_id           String   @id @db.VarChar
  tc_agency_id      String   @db.VarChar
  price             Float
  currency_type     String   @db.VarChar
  payment_method    Int
  transfers         Int?
  agency_id         String?  @db.VarChar
  transfer_duration Int?
  updatedat         DateTime @db.Timestamp(6)
  agencyid          Int?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model feed_info {
  id                  String?  @default(dbgenerated("nanoid(11)"))
  tc_agency_id        String   @db.VarChar
  feed_publisher_name String   @db.VarChar
  feed_publisher_url  String   @db.VarChar
  feed_lang           String   @db.VarChar
  default_lang        String?  @db.VarChar
  feed_start_date     Int?
  feed_end_date       Int?
  feed_version        String?  @db.VarChar
  feed_contact_email  String?  @db.VarChar
  feed_contact_url    String?  @db.VarChar
  updatedat           DateTime @db.Timestamp(6)
  agencyid            Int?

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model frequencies {
  id              String?  @default(dbgenerated("nanoid(11)"))
  tc_agency_id    String   @db.VarChar
  trip_id         String   @db.VarChar
  start_time      String   @db.VarChar
  start_timestamp Int?
  end_time        String   @db.VarChar
  end_timestamp   Int?
  headway_secs    Int
  exact_times     Int?
  updatedat       DateTime @db.Timestamp(6)
  agencyid        Int?

  @@index([trip_id], map: "idx_frequencies_trip_id")
  @@ignore
}

model goose_db_version {
  id         Int       @id @default(autoincrement())
  version_id BigInt
  is_applied Boolean
  tstamp     DateTime? @default(now()) @db.Timestamp(6)
}

model message {
  id              String   @id(map: "chat_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Char(11)
  tc_agency_id    String
  conversation_id String   @db.Char(11)
  profile_id      String   @db.Char(11)
  user_id         String   @db.Char(11)
  message         String
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())
  status          String?  @default("open")
}

model password {
  hash    String
  user_id String @unique @db.Char(11)
  id      String @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Char(11)
}

model profile {
  id           String   @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Char(11)
  user_id      String   @db.Char(11)
  tc_agency_id String
  user_type    String   @default("USER")
  verified     Boolean  @default(false)
  is_active    Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime

  @@unique([tc_agency_id, user_id])
}

model routes {
  route_id               String   @id @db.VarChar
  agency_id              String?  @db.VarChar
  tc_agency_id           String   @db.VarChar
  route_short_name       String   @db.VarChar
  route_long_name        String   @db.VarChar
  alias_route_short_name String?  @db.VarChar
  alias_route_long_name  String?  @db.VarChar
  route_desc             String?  @db.VarChar
  route_type             Int
  route_url              String?  @db.VarChar
  route_color            String?  @db.VarChar
  route_text_color       String?  @db.VarChar
  route_sort_order       Int?
  continuous_pickup      Int?
  continuous_drop_off    Int?
  network_id             String?  @db.VarChar
  updatedat              DateTime @db.Timestamp(6)
}

model schedule {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Char(11)
  created_at   DateTime @default(now())
  updated_at   DateTime
  tc_agency_id String?
}

model schedule_change {
  id               String   @id(map: "change_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Char(11)
  schedule_id      String   @db.Char(11)
  conversation_ids String[] @default([])
  created_at       DateTime @default(now())
  updated_at       DateTime
  tc_agency_id     String?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model shapes {
  id                  String?  @default(dbgenerated("nanoid(11)"))
  tc_agency_id        String   @db.VarChar
  shape_id            String   @db.VarChar
  shape_pt_lat        Float
  shape_pt_lon        Float
  shape_pt_sequence   Int
  shape_dist_traveled Float?
  updatedat           DateTime @db.Timestamp(6)

  @@ignore
}

model tc_agency {
  id                  String   @id(map: "agencies_pkey") @unique @default(dbgenerated("uuid_generate_v4()")) @db.Char(11)
  tc_agency_id        String   @unique
  agency_name         String
  timezone            String?
  is_paid             Boolean  @default(false)
  end_time            BigInt?
  created_at          DateTime @default(now())
  updated_at          DateTime
  is_active           Boolean?
  trip_updates_url    String?
  alert_updates_url   String?
  vehicle_updates_url String?
  gtfs_url            String
}

model token {
  id         String   @id @unique @default(dbgenerated("uuid_generate_v4()")) @db.Char(11)
  token      String   @unique
  type       String
  expires_at DateTime
}

model users {
  id             String   @id(map: "user_pkey") @unique(map: "user_id_key") @default(dbgenerated("uuid_generate_v4()")) @db.Char(11)
  email          String   @unique(map: "user_email_key")
  last_name      String
  first_name     String
  default_agency String
  avatar_color   String
  is_active      Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime
  user_type      String?
}

model Permission {
  id          String   @id
  entity      String
  action      String
  access      String
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Role        Role[]

  @@unique([action, entity, access])
}

model Plan {
  id           String         @id @unique
  name         String
  description  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  Price        Price[]
  Subscription Subscription[]
}

model Price {
  id           String         @id @unique
  planId       String
  amount       Int
  currency     String
  interval     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  Plan         Plan           @relation(fields: [planId], references: [id], onDelete: Cascade)
  Subscription Subscription[]
}

model Role {
  id          String       @id
  name        String       @unique
  description String       @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  Permission  Permission[]
  User        User[]
}

model Subscription {
  id                 String   @id @unique
  userId             String   @unique
  planId             String
  priceId            String
  interval           String
  status             String
  currentPeriodStart Int
  currentPeriodEnd   Int
  cancelAtPeriodEnd  Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime
  Plan               Plan     @relation(fields: [planId], references: [id])
  Price              Price    @relation(fields: [priceId], references: [id])
  User               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id           String        @id
  email        String        @unique
  username     String?       @unique
  customerId   String?       @unique
  createdAt    DateTime?     @default(now())
  updatedAt    DateTime?
  Subscription Subscription?
  UserImage    UserImage?
  Role         Role[]
}

model UserImage {
  id          String   @id
  altText     String?
  contentType String
  blob        Bytes
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
